import sqlite3
import random
import time
from datetime import datetime, timedelta
from vkbottle.bot import Bot, Message
from aiohttp.client_exceptions import ClientConnectorError
from loguru import logger
import asyncio
from vkbottle.dispatch.rules.base import FromUserRule
from vkbottle.dispatch.rules.base import CommandRule
from vkbottle import (Keyboard,
                      KeyboardButtonColor,
                      Text,
                      EMPTY_KEYBOARD)
from config import TOKEN
from tools import labelers
bot = Bot(TOKEN)
bot.labeler.vbml_ignore_case = True
bot.labeler.auto_rules = [FromUserRule()]
clubpref="[club224599461|@ampersand_bot]"
for custom_labeler in labelers:
    bot.labeler.load(custom_labeler)
import tools
# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('database.db')
c = conn.cursor()
c.execute('''
    CREATE TABLE IF NOT EXISTS users
    (id INTEGER PRIMARY KEY,
    drink INTEGER,
    last_request_date INTEGER)
''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@bot.on.message(text=(",–∫–ª–∞–≤–∞","[club224599461|@ampersand_bot] –∫–ª–∞–≤–∞"))
async def handle_keyboard(message: Message):
    keyboard = Keyboard()
    keyboard.add(Text("–ø–∏—Ç—å"), color=KeyboardButtonColor.NEGATIVE)
    keyboard.add(Text("–ø–∏—Ç—å —Ç–æ–ø"), color=KeyboardButtonColor.NEGATIVE)
    keyboard.add(Text("—é–Ω–∏–∫—Å —Ç–∞–π–º"), color=KeyboardButtonColor.NEGATIVE)
    keyboard.row()
    keyboard.add(Text("–ø–æ–º–æ—â—å"), color=KeyboardButtonColor.NEGATIVE)
    keyboard.row()
    keyboard.add(Text("—É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É"), color=KeyboardButtonColor.POSITIVE)


    await message.answer("–∫–ª–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", keyboard=keyboard)
    
    
@bot.on.message(text=(",—É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É","[club224599461|@ampersand_bot] —É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É"))
async def remove_keys(message: Message):
    await message.answer("–∫–ª–∞–≤–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞", keyboard=EMPTY_KEYBOARD)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "–ø–∏—Ç—å".
async def handle_drink_command(user_id):
    current_date = int(time.time())
    res = c.execute("SELECT * FROM users WHERE id = ?", (user_id,)) 
    user = res.fetchone()
    
    drink = random.randint(200, 2000)
    total_drink = drink
    if user:
        if datetime.fromtimestamp (user[2]).date() == datetime.now().date():
            return "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É '–ø–∏—Ç—å' —Å–µ–≥–æ–¥–Ω—è."
        c.execute("UPDATE users SET drink = drink + ?, last_request_date = ? WHERE id = ?",
                  (drink, current_date, user_id)
        )
        total_drink += user[1]
    else:
        c.execute(
            "INSERT INTO users (id, drink, last_request_date) VALUES (?, ?, ?)", 
            (user_id, drink, current_date)
        )

    conn.commit()

    return f"–í—ã –≤—ã–ø–∏–ª–∏ {drink} –º–ª —Å–ø–µ—Ä–º—ã. –í—Å–µ–≥–æ –≤—ã –≤—ã–ø–∏–ª–∏ : {total_drink} –º–ª —Å–ø–µ—Ä–º—ã."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "—Ä–∞–∑–º–µ—Ä –º–æ—è –∫—Ä—É–∂–∫–∞"
async def handle_count_command(user_id):
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = c.fetchone()
    if not user:
        return "–í—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É '–ø–∏—Ç—å'."

    return f"–í—Å–µ–≥–æ –≤—ã –≤—ã–ø–∏–ª–∏: {user[1]} –º–ª."


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "–ø–∏—Ç—å —Ç–æ–ø"
async def handle_top_command(bot):
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏—Ö "–º–ª" –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    c.execute("SELECT * FROM users ORDER BY drink DESC")
    top_users = c.fetchall()
    top_users = top_users[:10]
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = [user[0] for user in top_users]
    user_names = await bot.api.users.get(user_ids=user_ids)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "–æ–±—â–∏–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, user in enumerate(top_users, start=1):
        user_name = f'[id{user[0]}|{user_names[i - 1].first_name} {user_names[i - 1].last_name}]'
        response += f"{i}. {user_name}: {user[1]} –º–ª\n"

    return response


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞


@bot.error_handler.register_error_handler(ClientConnectorError)
async def no_internet_error_handler(e: ClientConnectorError):
    logger.warning(f"No internet connection: {e}")
    time.sleep(15)


@bot.on.message(text=(",–ø–∏—Ç—å","[club224599461|@ampersand_bot] –ø–∏—Ç—å"))
async def drink_handler(message: Message):
    if message.from_id > 0:
        response = await handle_drink_command(message.from_id)
        await message.answer(response)
        await message.answer(sticker_id=58258)


@bot.on.message(CommandRule("–ø–∏—Ç—å –∫—Ä—É–∂–∫–∞", [","], 0))
async def drink_count_handler(message: Message):
    response = await handle_count_command(message.from_id)
    await message.answer(response)


@bot.on.message(CommandRule("–ø–∏—Ç—å —Ç–æ–ø",  [",",f"{clubpref} "], 0))
async def top_handler(message: Message):
    response = await handle_top_command(bot)
    await message.answer(response, disable_mentions=True)
    await message.answer(sticker_id=58261)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–∫ –∏–Ω—Ñ–æ
@bot.on.message(CommandRule("–ø–∏—Ç—å –∏–Ω—Ñ–æ", [","], 0))
async def kok_info_handler(message: Message):
    return "–ú–æ–¥—É–ª—å –ø–∏—Ç—å –≤ –±–æ—Ç–µ ampersand\nver.1.0.0,stable \nDerfikop‚ù§Ô∏è,\nF1zzTao‚ù§Ô∏è\nampersand gang 4everüî´"


@bot.on.message(CommandRule("–ø–æ–º–æ—â—å –ø–∏—Ç—å", [","], 0))
async def kok_help_handler(message: Message):
    return '–∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è –ø–∏—Ç—å:\n–ø–∏—Ç—å, –ø–∏—Ç—å –∏–Ω—Ñ–æ,\n–ø–∏—Ç—å —Ç–æ–ø, –ø–∏—Ç—å –∫—Ä—É–∂–∫–∞'

@bot.on.message(text=(",—é–Ω–∏–∫—Å —Ç–∞–π–º","[club224599461|@ampersand_bot] —é–Ω–∏–∫—Å —Ç–∞–π–º"))
async def time_handler(message: Message):
    keyboard = (
    Keyboard(inline=True)
    .add(Text("–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"), color=KeyboardButtonColor.NEGATIVE)
    .row()
    .add(Text("–ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"), color=KeyboardButtonColor.POSITIVE)
    )
    await message.answer("–ö–∞–∫–æ–π –≤–∏–¥ —é–Ω–∏–∫—Å —Ç–∞–π–º–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?", keyboard = keyboard)

@bot.on.message(text=(f"{clubpref} –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"))
async def time_nonformat(message: Message):
    nf_time=(str(int(time.time())))
    await message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–µ–æ–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —é–Ω–∏–∫—Å –≤—Ä–µ–º—è : {nf_time}")
    await message.answer(sticker_id=3130)


@bot.on.message(text=(f"{clubpref} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"))
async def time_format(message: Message):
    f_time=(time.strftime('%X %x %Z'))
    await message.answer(f"–¢–µ–∫—É—â–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —é–Ω–∏–∫—Å –≤—Ä–µ–º—è :\n{f_time}")
    await message.answer(sticker_id=3130)


@bot.on.message(CommandRule("–ø–æ–º–æ—â—å –¥—Ä—É–≥–æ–µ", [","], 0))
async def misc_handler(message: Message):
    return "–ê–ö–ê –º–æ–¥—É–ª—å –º—É–ª—å—Ç—É—Ç—É–ª,\n–ø–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è '–¥—Ä—É–≥–æ–µ':\n‚Ä¢—é–Ω–∏–∫—Å —Ç–∞–π–º\n‚Ä¢–∫–ª–∞–≤–∞\n‚Ä¢–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ü§î"

@bot.on.message(CommandRule("–ø–æ–º–æ—â—å –º—É–ª—å—Ç–∏—Ç—É–ª", [","], 0))
async def misc_handler(message: Message):
    return "–º–æ–¥—É–ª—å –º—É–ª—å—Ç—É—Ç—É–ª,\n–ø–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è '–º—É–ª—å—Ç–∏—Ç—É–ª':\n‚Ä¢—é–Ω–∏–∫—Å —Ç–∞–π–º\n‚Ä¢–∫–ª–∞–≤–∞\n‚Ä¢–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ü§î"


@bot.on.message(text=(",–ø–æ–º–æ—â—å","[club224599461|@ampersand_bot] –ø–æ–º–æ—â—å"))
async def help_handler(message: Message):
    return '–ø–æ–º–æ—â—å –±–æ—Ç–∞ –∞–º–ø–µ—Ä—Å–∞–Ω–¥[&]\n–ø–∏—à–∏ ,–ø–æ–º–æ—â—å <–∏–º—è_–º–æ–¥—É–ª—è> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–¥—É–ª–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ! \n –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏: \n‚Ä¢–ø–∏—Ç—å\n‚Ä¢–¥—Ä—É–≥–æ–µ(–º—É–ª—å—Ç–∏—Ç—É–ª)'
if __name__ == "__main__":
   bot.run_forever()
